post:
  operationId: userLogin
  tags:
    - User
  security: []
  summary: user login
  description: >-
    This endpoint authenticates a User from an `identifier` (normally an email
    address) and `password`. It also identifies the application making requests
    from the `apikey`. The response returns the User object for the logged-in
    User and a token for use in future secured requests, as well as a
    `fileSignature` and `filePolicy` which may be used for access to images
    stored on FileStack.
  requestBody:
    required: true
    content:
      application/json:
        schema:
          type: object
          properties:
            apikey:
              type: string
              description: >-
                An API key assigned to an application for access to this API. To
                request an API key please contact the system administrator.
            identifier:
              type: string
              description: '`User.Username`, normally the same as `User.email`'
            password:
              type: string
              description: >-
                User password any characters or numbers allowed, with a minumum
                length of 10.
              minLength: 10
        examples:
          user:
            value:
              apikey: w32r92i235jrw3r
              identifier: user@test.com
              password: some-secure-password
  responses:
    '200':
      description: Success – logged in
      content:
        application/json:
          schema:
            $ref: ../components/schemas/SuccessfulLogin.yaml
    '400':
      description: failed to retrieve User
      content:
        application/problem+json:
          schema:
            $ref: ../components/schemas/Error.yaml
    '401':
      description: password or identifier mismatch
      content:
        application/problem+json:
          schema:
            $ref: ../components/schemas/Error.yaml
  x-postman-tests:
    description: >
      - Side effects Saves the returned body to the postman environment,
       token -> `token`; logged-in user -> `user`.
      - Tests 1. 200 response to valid credentials 2. returns user 3. save token
      and user to env
    code: >
      pm.test('200 response to valid credentials', function () {
      pm.response.to.have.status(200);}); pm.test('Returns TestVOR user',
      function () {
      pm.expect(pm.response.json().user.uname).to.eql('testVOR');});
      pm.test('save the token to env.token', function () {
      pm.environment.set('token', pm.response.json().token);}); pm.test('save
      user too', function () { pm.environment.set('user',
      JSON.stringify(pm.response.json().user));}); pm.test('token in response
      matches token in environment', function () {
      pm.expect(pm.response.json().token).to.eql(pm.environment.get('token'));});
get:
  operationId: userRenewToken
  tags:
    - User
  summary: renew token
  description: >-
    This endpoint renews the User's access token. Response returns the User
    object for the logged-in User and a 24-hr token for use in future secured
    requests. It includes a `fileSignature` and `filePolicy` which may be used
    for access to images stored on FileStack.
  responses:
    '200':
      description: Success – token refreshed
      content:
        application/json:
          schema:
            $ref: ../components/schemas/SuccessfulLogin.yaml
    '400':
      description: failed to retrieve User
      content:
        application/problem+json:
          schema:
            $ref: ../components/schemas/Error.yaml
    '401':
      description: password or identifier mismatch
      content:
        application/problem+json:
          schema:
            $ref: ../components/schemas/Error.yaml

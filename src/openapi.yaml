openapi: 3.0.1
info:
  title: VCPR.ORG Protocol Editor API
  version: 2.0.2
  contact:
    name: 'Jim Ehrlich, DVM'
    url: 'https://github.com/jehrlich/VCPR_API'
    email: jehrlich@vcpr.org
  description: 'API serving the Veterinary Protocol Manager&trade; application. &copy; DairySight LLC, Argyle NY 2020'
  x-api-id: bFU9IiwiaXNzIjoiVkNQUi1zZXJ2ZXIiLCJl
  x-audience: company-internal
servers:
  - description: 'Production server, uses production database'
    url: 'https://VCPR.ORG'
  - description: 'Staging server, uses staging database'
    url: 'https://stage.VCPR.ORG'
  - description: 'Test server, uses regenerated test database'
    url: 'https://test.VCPR.ORG'
  - description: 'Local docker container, uses regenerated test database'
    url: 'http://localhost'
security:
  - AuthToken: []
paths:
  /api/users/logins:
    post:
      operationId: userLogin
      tags:
        - editor
        - idempotent
      security: []
      summary: user login
      description: 'this endpoint authenticates a User from an `identifier` (normally an email address) and `password`. Response returns the User object for the logged-in User and a token for use in future secured requests, as well as a `fileSignature` and `filePolicy` which may be used for access to images stored on FileStack.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                  description: '`User.Username`, normally the same as `User.email`'
                password:
                  type: string
                  description: wip are there no restrictions to this password on setup such as minimum 8 characters
            examples:
              user:
                value: {"identifier": "user@test.com", "password": "some-secure-password"}
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulLogin'
        '400':
          description: failed to retrieve User
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: password or identifier mismatch
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
      x-postman-tests:
        description: |
          - Side effects Saves the returned body to the postman environment,
           token -> `token`; logged-in user -> `user`.
          - Tests 1. 200 response to valid credentials 2. returns user 3. save token and user to env
        code: |
          pm.test('200 response to valid credentials', function () { pm.response.to.have.status(200);}); pm.test('Returns TestVOR user', function () { pm.expect(pm.response.json().user.uname).to.eql('testVOR');}); pm.test('save the token to env.token', function () { pm.environment.set('token', pm.response.json().token);}); pm.test('save user too', function () { pm.environment.set('user', JSON.stringify(pm.response.json().user));}); pm.test('token in response matches token in environment', function () { pm.expect(pm.response.json().token).to.eql(pm.environment.get('token'));});
    get:
      operationId: userRenewToken
      tags:
        - editor
        - idempotent
      summary: renew token
      description: this endpoint renews the User's access token. Response returns the User object for the logged-in User and a 24-hr token for use in future secured requests. It includes a `fileSignature` and `filePolicy` which may be used for access to images stored on FileStack.
      responses:
        '200':
          description: Success â€“ token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulLogin'
        '400':
          description: failed to retrieve User
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: password or identifier mismatch
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Error'
      x-postman-tests:
        description: |
          - Side effects Saves the returned body to the postman environment,
           token -> `token`; logged-in user -> `user`.
          - Tests 1. 200 response to valid credentials 2. returns user 3. save token and user to env
        code: |
          pm.test('200 response to valid credentials', function () { pm.response.to.have.status(200);}); pm.test('Returns TestVOR user', function () { pm.expect(pm.response.json().user.uname).to.eql('testVOR');}); pm.test('save the token to env.token', function () { pm.environment.set('token', pm.response.json().token);}); pm.test('save user too', function () { pm.environment.set('user', JSON.stringify(pm.response.json().user));}); pm.test('token in response matches token in environment', function () { pm.expect(pm.response.json().token).to.eql(pm.environment.get('token'));});
  /api/users:
    get:
      operationId: getVORUserIds
      tags:
        - editor
      summary: get ID and names of other VOR Users
      description: get ID and names of other VOR Users.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  vors:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: User's ID
                        name:
                          type: string
                          description: User's Name
    put:
      operationId: updateUser
      tags:
        - editor
      summary: update-user
      description: this endpoint updates User data. Any User may update their own data, i.e., idempotently update User data. A VOR may update User data of a User in a `CLIENT` relationship with that VOR. A SAOR may update data of any User.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                properties:
                  updated-records:
                    type: integer
                    description: number of db records altered
    x-postman-tests:
      description: |
        - Assumes current user is testVOR - Side effects reset current user data to examples/testVOR - Tests 1. 200 response
      code: |
        pm.test('200 response', function () { pm.response.to.have.status(200);});
  '/api/users/{id}':
    get:
      operationId: getUser
      tags:
        - editor
      summary: get user
      description: this endpoint returns User data as specified by User `id`. Any User may get their own data. A VOR may get User data of Users in a `CLIENT` relationship with that VOR. A SAOR may get data of any User.
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: User ID key
          example: 2
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
      x-postman-tests:
        description: |
          - Tests 1. 200 response to valid credentials
        code: |
          pm.test('200 response to valid credentials', function () { pm.response.to.have.status(200); });
    delete:
      operationId: deleteUser
      tags:
        - editor
      summary: delete user
      description: this endpoint supports the (reversible) "delete" of a User by setting user.status to `REMOVED`. Removed Users are not visible in normal queries.
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: User ID key
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: integer
                    description: number of Users deleted
  /api/users/comments:
    post:
      operationId: recordComment
      tags:
        - editor
      summary: record a User comment
      description: this endpoint records a User comment to db and emails admin. It supports privacy controls.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: confirm 1 comment recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  recorded:
                    type: integer
  /api/users/my-right-relations:
    get:
      operationId: getMyRightRelations
      tags:
        - editor
      summary: get my right relations
      description: this endpoint returns Users who have the specified relationship to a `VOR` User.
      parameters:
        - name: relationship
          in: query
          schema:
            $ref: '#/components/schemas/Relationship'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
    post:
      operationId: createRightRelation
      tags:
        - editor
      summary: 'add a User with relationship'
      description: 'this endpoint adds a User and a relationship of the type specified by `name` to the current User, who must be a VOR. Defaults to CLIENT relationship.'
      parameters:
        - name: relationship
          in: query
          schema:
            $ref: '#/components/schemas/Relationship'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: related User
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
  /api/protocols/sharesToAll/:
    get:
      operationId: getSharesToAll
      summary: get list of User's protocols shared to all
      description: this endpoint retrieves a list of User's protocols shared to all VORs.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  shares:
                    type: array
                    items:
                      type: object
                      properties:
                        pxId:
                          type: integer
                          description: Protocol ID
                        name:
                          type: string
                          description: Protocol Name
                        clonable:
                          type: boolean
                          description: Switch to determine whether other VORs allowed to clone this Protocol
                          example: true
              example:
                shares:
                  - pxId: 1
                    name: example protocol
                    clonable: false
  /api/protocols/sharesToAll/{pxId}:
    post:
      operationId: shareToAll
      summary: share Protocol with all VOR Users
      description: get list of User's protocols shared to all
      parameters:
        - name: pxId
          in: path
          schema:
            type: integer
          required: true
          explode: true
          description: ID of Protocol to be shared
        - name: clonable
          in: query
          schema:
            type: boolean
          required: false
          explode: true
      responses:
        '204':
          description: No Content
    delete:
      operationId: unShareToAll
      summary: get list of User's protocols shared to all
      description: This endpoint retrieves a list of User's protocols shared to all.
      parameters:
        - name: pxId
          in: path
          schema:
            type: integer
          required: true
          description: ID of Protocol
      responses:
        '204':
          description: No Content
  /api/protocols/shares:
    get:
      operationId: getMyProtocolShares
      tags:
        - editor
      summary: get my protocol shares
      description: This endpoint retrieves a User's protocol shares, optionally filtered by protocol and recipient.
      parameters:
        - name: pxFilter
          in: query
          schema:
            type: integer
          required: false
          description: select only shares of this protocol ID
        - name: toFilter
          in: query
          schema:
            type: integer
          required: false
          description: select only shares to this VOR User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  shares:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProtocolShare'
    post:
      operationId: createProtocolShare
      tags:
        - editor
      summary: create protocol share
      description: this endpoint shares a protocol with another VOR User.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtocolShare'
      responses:
        '200':
          description: protocol shared
          content:
            application/json:
              schema:
                type: object
                properties:
                  shared:
                    type: integer
                    description: number of shares created
                    example: 1
    delete:
      operationId: deleteProtocolShare
      tags:
        - editor
      summary: delete protocol share
      description: this endpoint retracts a protocol share with another VOR User.
      parameters:
        - name: pxId
          in: query
          schema:
            type: integer
          required: true
          description: protocol ID
        - name: toVor
          in: query
          schema:
            type: integer
          required: true
          description: ID of VOR to whom protocol was shared
      responses:
        '200':
          description: protocol shared
          content:
            application/json:
              schema:
                type: object
                properties:
                  un-shared:
                    type: integer
                    description: number of shares deleted
  /api/protocols:
    get:
      operationId: getMyProtocols
      tags:
        - editor
      summary: get my protocols
      description: 'this endpoint retrieves all protocols owned by, or shared with, the current User. The default excludes deleted (status DEPRECATED) protocols.'
      parameters:
        - name: status
          in: query
          required: false
          style: pipeDelimited
          explode: false
          description: 'filter protocols to include only protocols with listed statuses. If this parameter is omitted, the query defaults to all status values **except** DEPRECATED.'
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ProtocolStatus'
          deprecated: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: array of protocols
                type: object
                properties:
                  protocols:
                    type: array
                    items:
                      $ref: '#/components/schemas/Protocol'
    post:
      operationId: createProtocol
      tags:
        - editor
      summary: create protocol
      description: this endpoint supports Protocol creation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Protocol'
      responses:
        '200':
          description: recorded protocol
          content:
            application/json:
              schema:
                type: object
                properties:
                  protocol:
                    $ref: '#/components/schemas/Protocol'
    put:
      operationId: updateProtocol
      tags:
        - editor
      summary: update protocol
      description: This endpoint updates a Protocol.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Protocol'
      responses:
        '200':
          description: recorded protocol
          content:
            application/json:
              schema:
                type: object
                properties:
                  protocol:
                    $ref: '#/components/schemas/Protocol'
  /api/protocols/eligibilities:
    get:
      operationId: getEligibilities
      tags:
        - editor
      summary: get eligibilities
      description: 'This endpoint returns an array of Eligibilities from which a User may choose. The ID field is authoritative, i.e., is all that is needed to identify a particular Eligibility.'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: array of eligibilities
                type: object
                properties:
                  eligibilities:
                    type: array
                    items:
                      $ref: '#/components/schemas/Eligibility'
  /api/protocols/diagnoses:
    get:
      operationId: getDiagnoses
      tags:
        - editor
      summary: get diagnoses
      description: 'this endpoint returns an array of Diagnoses from which a User may choose. The ID field is authoritative, i.e., is all that is needed to identify a particular Diagnosis.'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: array of diagnoses
                type: object
                properties:
                  diagnoses:
                    type: array
                    items:
                      $ref: '#/components/schemas/Diagnosis'
  /api/protocols/libs:
    get:
      operationId: getLibraryProtocols
      tags:
        - editor
      summary: get library protocols
      description: all protocols owned by or shared to current User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Array of Protocols from public library
                type: object
                properties:
                  protocols:
                    type: array
                    items:
                      $ref: '#/components/schemas/Protocol'
  /api/protocols/dosages:
    post:
      operationId: validateDosage
      tags:
        - editor
      summary: validate a Dosage and return _dose
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DoseFunctions'
      responses:
        '200':
          description: _dose
          content:
            application/json:
              schema:
                properties:
                  _dose:
                    type: string
                    description: string representation of submitted Dosage
  /api/protocols/libstubs:
    get:
      operationId: getLibraryPxes
      tags:
        - editor
      summary: get library pxes
      description: this endpoint returns all the Protocols owned by, or shared to, the current User.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: array of protocol stubs from public library
                type: object
                properties:
                  pxes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Px'
  '/api/protocols/{id}':
    get:
      operationId: getProtocol
      tags:
        - editor
      summary: get-this-protocol
      description: this endpoint retrieves a protocol by protocol.id.
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: protocol IDkey
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  protocol:
                    $ref: '#/components/schemas/Protocol'
            text/html:
              schema:
                properties:
                  protocol:
                    $ref: '#/components/schemas/Protocol'
    delete:
      operationId: deleteProtocol
      tags:
        - editor
      summary: delete protocol
      description: 'this endpoint changes protocol.status to DELETED (this does not actually remove it from the database).'
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: Protocol ID key
      responses:
        '200':
          description: Protocol deprecated
          content:
            application/json:
              schema:
                type: object
                properties:
                  deprecated:
                    type: integer
                    description: number of Protocols deprecated
  /api/protocols/prescriptions:
    description: '`Prescriptions` document the transaction of a `VOR` User prescribing a `Protocol` for use by a `MOR` User who must have a `CLIENT` relationship with the prescribing doctor.'
    get:
      operationId: getMyPrescriptions
      tags:
        - editor
      summary: get my prescriptions
      description: this endpoint returns all prescriptions accessible to current User.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: array of prescriptions accessible to current User.
                properties:
                  prescriptions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Prescription'
    post:
      operationId: createPrescription
      tags:
        - editor
      summary: record a prescription
      description: 'this endpoint permanently records a prescription and returns its assigned GUID **not** idempotent. Prescriptions form a permanent archival record of a transaction which may be invalidated, but not deleted.'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  prescription:
                    $ref: '#/components/schemas/PrescriptionRequest'
  '/api/protocols/prescriptions/{id}':
    get:
      operationId: getPrescription
      tags:
        - editor
      summary: get prescription by ID
      description: this endpoint retrieves a Prescription by prescription.id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: Prescription ID key
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  prescription:
                    $ref: '#/components/schemas/Prescription'
            text/html:
              schema:
                properties:
                  prescription:
                    $ref: '#/components/schemas/Prescription'
  '/api/protocols/{id}/prescriptions':
    get:
      operationId: getPrescriptionsOfProtocol
      tags:
        - editor
      summary: get prescriptions of a protocol
      description: this endpoint retrieves prescriptions by protocol.id.
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
          description: Protocol ID key
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  prescriptions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Prescription'
  /api/labels:
    get:
      operationId: getLabels
      tags:
        - editor
        - label
      summary: get-labels
      description: this endpoint returns the full array of drug labels.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  labels:
                    type: array
                    items:
                      $ref: '#/components/schemas/LabelClaim'
      x-postman-tests:
        description: |
          - Side effects
            none
          - Tests
            1. 200 response
            2.  returns `labels` object with array of labels
            code: >
              pm.test("Status code is 200", function () {
              pm.response.to.have.status(200);});
              pm.test("returns labels object with array of labels", function () {
              pm.expect(pm.response.json().labels).to.be.an('array');});
              pm.test("check first label has expected NADA", function () {
              pm.expect(pm.response.json().labels[0].nada).to.eql("200-308");});
              pm.test("492 labels in array", function () {
              pm.expect(pm.response.json().labels.length).to.eql(492);});
  '/api/labels/inserts/{lxId}':
    get:
      operationId: getPackageInsert
      tags:
        - editor
        - label
      summary: get package insert
      description: this endpoint returns the label package insert.
      parameters:
        - name: lxId
          in: path
          schema:
            type: integer
          required: true
          description: label ID
          example: 1028016
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: html
        '401':
          $ref: '#/components/responses/Unauthorized'
      x-postman-tests:
        description: |
          - Tests 1. 200 response to valid credentials
        code: |
          // with lxId = 1028016 pm.test('200 response to valid credentials', function () { pm.response.to.have.status(200);}); pm.test("label insert 1028016 is Bio-Mycin", function () { pm.expect(pm.response.json().labelInsert).to.include("Bio-Mycin");});
  /admin/product:
    get:
      operationId: getGbdHeaderArrayByNDC
      tags:
        - admin
      summary: get array of summary listing of a Greenbook Drug by ndc pattern
      description: this endpoint returns the summary listing of a Greenbook Drug by ndc pattern.
      parameters:
        - name: ndcProd
          in: query
          schema:
            type: integer
          required: false
          description: first section labeler code of a NDC
        - name: ndcLabeler
          in: query
          schema:
            type: integer
          required: false
          description: mid section product code of a NDC
        - name: ndcBrand
          in: query
          schema:
            type: integer
          required: false
          description: end section package code of a NDC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GreenbookHeader'
  '/admin/product/{ndc}':
    get:
      operationId: getGbdHeaderByNDC
      tags:
        - admin
      summary: get summary listing of a Greenbook Drug
      description: this endpoint returns the summary listing of a Greenbook Drug by ndc identifier.
      parameters:
        - name: ndc
          in: path
          schema:
            type: string
          required: true
          description: 'unique 10-digit, 3-segment number. labelerCode-productCode-packageCode'
          example: 0061-4321-03
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GreenbookHeader'
  '/admin/product/spl/{ndc}':
    get:
      operationId: getGbdLinkByNDC
      tags:
        - admin
      summary: get detail of a Greenbook Drug as a link or XML
      description: this endpoint returns, as an HTML link or XML file, the summary listing of a Greenbook Drug by ndc identifier.
      parameters:
        - name: ndc
          in: path
          schema:
            type: string
          required: true
          description: 'unique 10-digit, 3-segment number. labelerCode-productCode-packageCode'
          example: 0061-4321-03
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: URL link to XML SPL data file
                type: string
                format: url
        '303':
          description: Redirect to SPL file served from FDA server
          content:
            text/xml:
              schema:
                description: XML SPL data file served from FDA server
                type: string
                format: xml
components:
  schemas:
    Error:
      type: object
      description: error response per RFC 7807
      required:
        - title
        - status
      properties:
        errorType:
          type: string
          description: A URI identifier that categorizes the error
          example: /errors/incorrect-user-pass
        title:
          type: string
          description: 'A brief, human-readable message about the error'
          example: Incorrect username or password.
        status:
          type: integer
          description: HTTP status code
          example: 404
        detail:
          type: string
          description: A human-readable description of the specific error
          example: Authentication failed due to incorrect username or password.
        instance:
          type: string
          description: A URI that identifies the specific occurrence of the error
          example: /login/log/abc123
    SuccessfulLogin:
      description: User object and generated auth token
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: add this token in X-Auth-Token header to authenticate future requests
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJleUp3Y205MmFXUmxja2xFSWpvaVkzSmxaR1Z1ZEdsaGJITWlMQ0p3Y205MmFXUmxja3RsZVNJNkluUmxjM1JXVDFJaWZRPT0iLCJpc3MiOiJwbGF5LXNpbGhvdWV0dGUiLCJleHAiOjE1Nzg3OTkyMDIsImlhdCI6MTU3ODc1NjAwMiwianRpIjoiMGNkMjU5MTM3NjQ3MDMzNDhmNTBhOWRmOTIyZWI1OGVmMGQwMDE4ODUyYjVmNGU0MThmNThjN2Y0YTk3OTllNzU2NWI3NDIwN2MxYTI5ZjUyYjQyNDMxZmZiOGIyMTgzOTAxNzQ1ZjUwYzllMzIwYjI5NWU2YzIzYzU5ZDJjYmEyM2ExNTFkZGRhYzhkMDA0M2FiYzkxOTdjNWUxOTdlNGM5YTU2NzlkZDcwMWJhMjkwMDA4ZGU1ODhkOTMyN2M5ZmQ4OWVlMmQ5NzQ4NWU0MDFiMjIzMGM1NWQzNDY3OGNkOThkM2Y1ZTM0Y2RiYmQ3MmM0NTBiODE2NWViNDI2MyJ9.Hs_oA1o5bT2SH7yoLNiATA7rLj4FmHvf4XOhOGkrEVA"
        filePolicy:
          type: string
          description: 'policy object for use in embedded image files, expires in 24 hr'
          example: 3da8c83495cb00d216369a355322078106ebc2e5eac78333eb90d00de5611d9a
        fileSignature:
          type: string
          description: signature for file policy object
          example: eyJleHBpcnkiOjE1Nzg3NTY2MDIsIm1heFNpemUiOjEwMDAwMDAwfQ==
    User:
      description: a User of a specific `usertype` class.
      properties:
        id:
          type: integer
          description: wip unique identifier for the User.
          example: 1
        uname:
          description: username
          type: string
          example: testVOR
        userType:
          $ref: '#/components/schemas/UserType'
        email:
          type: string
          format: email
          example: testVOR@dairysight.com
        firstname:
          type: string
          example: Test
        lastname:
          type: string
          example: Vet
        suffix:
          type: string
          description: wip -- firstname and lastname can escape having a description, but what is this suffix?
          example: DVM
      required:
        - id
        - userType
        - email
        - firstname
        - lastname
        - suffix
    NewUserData:
      description: User and address data to create a new account
      required:
        - email
        - firstname
        - lastname
      properties:
        uname:
          description: username
          type: string
          example: testUser
        email:
          type: string
          format: email
          example: name@vcpr.org
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Smith
        suffix:
          type: string
          example: DVM
        busName:
          type: string
          example: Some Business
        address1:
          type: string
          example: 123 Main St.
        address2:
          type: string
        town:
          type: string
          example: Anytown
        state:
          type: string
          example: Any State
        zip:
          type: string
          example: '12345'
        country:
          type: string
          example: USA
    Degree:
      description: an academic degree qualifying a User as a veterinarian
      required:
        - school
        - year
      properties:
        school:
          type: string
          example: "University of ***"
        year:
          type: string
        license:
          type: string
        license-state:
          type: string
        confirmVet:
          type: boolean
    UserType:
      type: string
      description: |
        an ordered list of User types associated with privilege levels:
        <br>
        * SAOR: a system administrator with top level privileges
        * VOR: a veterinarian who may create and prescribe protocols
        * MOR: a farm manager to whom protocols may be prescribed, and who may create Cases in a protocol
        * TOR: a farm technician who may execute assigned protocols for assigned cases
        * FARM: an account aggregating MOR and TOR Users
        * CLINIC: an account aggregating multiple VOR Users who work together
        * UNCONFIRMED: an account that has been requested but not confirmed by the owner
        * UNVOR: a User who requests VOR status, with neither email or admin approval
        * UNMOR: a User who requests MOR status but email not yet confirmed
        * PREVOR: a confirmed User who requests VOR status but still lacks either email confirmation or approval by admin
        * REMOVED: the record of a User who is no longer active and may not log in
      enum:
        - SAOR
        - VOR
        - MOR
        - TOR
        - FARM
        - CLINIC
        - UNCONFIRMED
        - PREVOR
        - UNVOR
        - UNMOR
        - REMOVED
      example: VOR
    AmducaClass:
      type: string
      enum:
        - ONLABEL
        - OFFLABEL
        - UNIDENTIFIED
    Relationship:
      type: string
      description: |
          a link between two Users defining a relationship

          - CLIENT: MOR User on right is a client of VOR User on left
          - EMPLOYEE: TOR User on right is an employee of MOR User on left
          - MEMBER: VOR User on right is a member of CLINIC on left, or MOR User on right is a manager of FARM on left
      enum:
        - CLIENT
        - EMPLOYEE
        - MEMBER
      example: CLIENT
    ProtocolStatus:
      type: string
      description: |
        status markers for protocols, in order of normal usage flow:

        - UNKNOWN: initial status when a protocol is being designed
        - VALIDATED: currently not used, for use when a validation process is implemented
        - PRESCRIBED: after a protocol has been prescribed for at least one client
        - INITIATED: after a protocol has been initiated (i.e., has one or more Cases)
        - RECALLED: protocol may no longer be prescribed and existing prescriptions are recalled
        - DEPRECATED: protocol has been "deleted" by the owner
      enum:
        - PRESCRIBED
        - VALIDATED
        - INITIATED
        - DEPRECATED
        - RECALLED
        - UNKNOWN
      example: PRESCRIBED
    ProtocolShare:
      description: share a protocol with another VOR User
      type: object
      properties:
        px-id:
          type: integer
          description: the `id` identifier of a Protocol
          example: 1
        share-to:
          type: integer
          description: IDof a VOR User who may use the protocol identified by pxId
          example: 2
        clonable:
          description: 'True/False switch to indicate whether User identified by `shareTo` has permission to create a copy of this protocol and own the clone.'
          type: boolean
          default: false
          example: true
    Px:
      description: 'the flattened subset of a Protocol which can be retrieved from the Px database table alone, without additional queries.'
      type: object
      required:
        - ownerId
        - name
        - created
        - edited
        - status
        - shareAll
      properties:
        id:
          type: integer
          description: wip
          example: 0
        ownerId:
          type: integer
          description: wip
          example: 0
        name:
          type: string
          description: User-friendly identifier for the protocol
          example: example protocol
        shortname:
          type: string
          description: Short name for the protocol
          example: EXamp
        created:
          type: string
          format: date-time
          description: wip is this ISO-*** Timestamp for protocol creation
          example: '2020-01-10T22:20:39Z'
        edited:
          type: string
          format: date-time
          description: wip is this ISO-*** Timestamp for protocol update
          example: '2020-02-10T22:20:39Z'
        status:
          $ref: '#/components/schemas/ProtocolStatus'
        vetNote:
          type: string
          description: wip
          example: wip
        wtMeatHrs:
          type: integer
          description: wip
          example: wip
        wtMilkHrs:
          type: integer
          description: number of hours that milk may not be sold for food after last treatment
          example: 72
        wtNote:
          type: string
          description: note regarding withholding
          example: Not for use in horses intended for food.
        considerations:
          type: string
          format: html
          description: free-form text specifying special considerations in choosing or using a protocol
          example: "<p>think first</p>"
        restrictions:
          type: string
          format: html
          description: free-form text note specifying restrictions
          example: "<p>not suitable in pregnancy</p>"
        dothis:
          type: string
          format: html
          description: free-form text specifying actions to be completed
          example: "<p>execute protocol</p>"
        recordthis:
          type: string
          format: html
          description: free-form text specifying data to record
          example: case data
        success:
          type: string
          format: html
          description: wip
          example: "<p>good</p>"
        failure:
          type: string
          format: html
          description: wip
          example: "<p>bad</p>"
        references:
          type: string
          format: html
          description: wip
          example: "<a href=\"https://en.wikipedia.org/wiki/Rickrolling\">Wikipedia</a>"
        shareAll:
          type: boolean
          default: false
          description: wip
    Protocol:
      description: a veterinary treatment protocol
      type: object
      required:
        - ownerId
        - name
        - status
        - withhold
        - instructions
      properties:
        id:
          description: 'key value created by the database. If `id` is zero or not present, a new database record will be created. If ''id'' matches an existing record in the db, that record will be updated instead.'
          type: integer
          format: int64
        ownerId:
          description: the `id` key of the VOR User who owns the protocol.
          type: integer
          example: 1
        name:
          description: wip
          type: string
          example: wip
        shortname:
          description: wip
          type: string
          example: wip
        created:
          description: ISO-8601-formatted datetime added by the server when a protocol is first saved.
          type: string
          format: date-time
          example: '2020-01-10T10:30:37Z'
        edited:
          description: ISO-8601-formatted datetime updated by the server whenever a protocol is saved.
          type: string
          format: date-time
          example: '2020-02-10T10:30:37Z'
        status:
          $ref: '#/components/schemas/ProtocolStatus'
        vetNote:
          type: string
        withhold:
          $ref: '#/components/schemas/Withhold'
        instructions:
          $ref: '#/components/schemas/Instructions'
        shareAll:
          type: boolean
          default: false
        caseDefinition:
          $ref: '#/components/schemas/CaseDefinition'
        treatments:
          description: "treatments used in this protocol"
          type: array
          items:
            $ref: '#/components/schemas/Treatment'
        tags:
          description: keywords for classification
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        diagnoses:
          description: diagnostic classifiers
          type: array
          items:
            $ref: '#/components/schemas/Diagnosis'
        eligibilities:
          description: eligibility criteria for potential cases
          type: array
          items:
            $ref: '#/components/schemas/Eligibility'
        promises:
          description: 'wip'
          type: array
          items:
            $ref: '#/components/schemas/Promise'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
    Instructions:
      description: instructions to execute a protocol
      type: object
      properties:
        considerations:
          type: string
          format: html
          example: "<p>This is just an example, not a real protocol.</p>"
        restrictions:
          type: string
          format: html
          example: "<p>Not for use on real animals.</p>"
        dothis:
          type: string
          format: html
          example: "<h3>Examinations to perform</h3>"
        recordthis:
          type: string
          format: html
          example: "<p>record every step in your notebook.</p>"
        success:
          type: string
          format: html
          example: "<p>All problems are gone</p>"
        failure:
          type: string
          format: html
          example: "<p>One or more problems remain</p>"
        references:
          type: string
          format: html
          example: "<a href=\"https://en.wikipedia.org/wiki/Rickrolling\">Wikipedia</a>"
    Metadata:
      description: (for future devekopment)
      properties:
        key:
          type: string
        value:
          type: string
    Treatment:
      description: "describes a series of one or more doses of a single product in terms of a sizeFunction (which specifies dose quantity) and a SequenceFunction (which specifies when the doses should be given). These functions are polymorphic and may depend on additional data which only is available when a protocol is assigned to a specific Case. For example, the initiation time will likely be needed to calculate the dose sequence and animal weight or other data may be needed to calculate dose size."
      type: object
      required:
        - product
        - route
        - sequencefunction
        - sizefunction
      properties:
        id:
          description: 'key value created by the database. If `id` is null or not present, a new database record will be created. If ''id'' matches an existing record in the db, that record will be updated instead.'
          type: string
          example: B-123
        ownerId:
          description: the `id` key of the VOR User who owns the treatment.
          type: integer
          example: 0
        description:
          description: description of Treatment
          type: string
          example: "3.0 ml per kg repeat"
        eligibilities:
          description: eligibility criteria for potential cases
          type: array
          items:
            $ref: '#/components/schemas/Eligibility'
        product:
          description: product name
          type: string
          example: MiracleMed
        _dose:
          description: transient string representation of `dosage`
          type: string
          example: 3.0 ml per kg repeat in 6 hours and again in 24 hours
        dosage:
          oneOf:
            - $ref: '#/components/schemas/DoseId'
            - $ref: '#/components/schemas/DoseFunctions'
        route:
          description: route of administration
          type: string
          example: wip
        wtMeatHrs:
          type: integer
          description: wip
          example: wip
        wtMilkHrs:
          type: integer
          description: wip
          example: wip
        wtNote:
          type: string
          description: wip
          example: wip
        nada:
          description: NADA or ANADA as specified by the FDA
          type: string
          example: wip
        tags:
          description: keywords for classification
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        note:
          type: string
          format: html
          example: "<p>a free-form note</p>"
        amduca:
          $ref: '#/components/schemas/AmducaClass'
    DoseId:
      properties:
        doseId:
          type: integer
          description: key to a label dosage
          example: wip
    DoseFunctions:
      properties:
        sequenceFunction:
          $ref: '#/components/schemas/SequenceFunction'
        sizeFunction:
          $ref: '#/components/schemas/SizeFunction'
    Dose:
      description: a single dose to be given at a specified time
      type: object
      required:
        - product
        - size
        - time
      properties:
        id:
          description: ID of animal to be dosed
          type: string
          example: Y6768B752
        product:
          description: product name
          type: string
          example: wip
        doseSize:
          $ref: '#/components/schemas/DrugQuantity'
        route:
          description: route of administration
          type: string
          example: wip
        time:
          type: string
          format: date-time
          example: '2020-01-10T22:20:39Z'
          description: wip ISO-8601-formatted datetime added by the server when the dose is saved.
        note:
          type: string
          format: html
      example: '{"id":"B-123","product":"MiracleMed","size":{"size":2,"unit":"ml"},"route":"intramuscular injection","time":"2020-01-10T10:30:37Z"}'
    Withhold:
      description: duration after last treatment during which some act is prohibited. Most often this restricts when meat or milk may be sold for food.
      required:
        - duration
        - prohibition
      properties:
        hoursMeat:
          type: number
          example: 22
          description: number of hours that must pass between exposure and slaughter
        hoursMilk:
          type: number
          example: 5
          description: number of hours that must pass between exposure and extracting milk for consumption
        note:
          type: string
          description: free-form text note
          format: html
          example: "<p>improvement apparent</p>"
    SizeFunction:
      description: function to calculate dose size
      oneOf:
        - $ref: '#/components/schemas/FixedDoseFunction'
        - $ref: '#/components/schemas/DoseByWeightFunction'
        - $ref: '#/components/schemas/LoadingDoseByWeightFunction'
        - $ref: '#/components/schemas/DoseRangeFunction'
        - $ref: '#/components/schemas/DoseRangeByWeightFunction'
    FixedDoseFunction:
      description: A fixed quantity expressed in any available unit
      required:
        - _type
        - dose
      properties:
        _type:
          type: string
          enum:
            - models.api.v1.FixedDoseFunction
        dose:
          $ref: '#/components/schemas/DrugQuantity'
      example:
        dose:
          quantity:
            dimension: Volume
            value: 3
            symbol: ml
        _type: models.api.v1.FixedDoseFunction
    DoseRangeFunction:
      description: a range of permissible dose size. The User may select any value within the range (inclusive).
      required:
        - _type
        - range
      properties:
        _type:
          type: string
          enum:
            - models.api.v1.DoseRangeFunction
          example: models.api.v1.DoseRangeFunction
        range:
          $ref: '#/components/schemas/DrugQuantityRange'
    DoseByWeightFunction:
      description: dose is specified as a quantity per unit of animal weight.
      required:
        - _type
        - dose
        - perUnit
      properties:
        _type:
          type: string
          enum:
            - models.api.v1.DoseByWeightFunction
        dose:
          $ref: '#/components/schemas/DrugQuantity'
        perUnit:
          $ref: '#/components/schemas/MassQuantity'
      example:
        dose:
          quantity:
            dimension: volume
            value: 3
            symbol: ml
        perUnit:
          dimension: mass
          value: 1
          symbol: kg
        _type: models.api.v1.DoseByWeightFunction
    LoadingDoseByWeightFunction:
      description: dose is specified as first (loading) dose and following doses per unit of animal weight.
      required:
        - _type
        - firstDose
        - followDose
        - perUnit
      properties:
        _type:
          type: string
          enum:
            - models.api.v1.DoseByWeightFunction
        firstDose:
          $ref: '#/components/schemas/DrugQuantity'
        followDose:
          $ref: '#/components/schemas/DrugQuantity'
        perUnit:
          $ref: '#/components/schemas/MassQuantity'
      example:
        perUnit:
          dimension: mass
          value: 1
          symbol: kg
        followDose:
          quantity:
            dimension: volume
            value: 3
            symbol: ml
        _type: models.api.v1.LoadingDoseByWeightFunction
        firstDose:
          quantity:
            dimension: volume
            value: 6
            symbol: ml
    DoseRangeByWeightFunction:
      description: dose is specified as a range per unit of animal weight. The User may select any value within the range (inclusive).
      required:
        - _type
        - range
        - perUnit
      properties:
        _type:
          type: string
          enum:
            - models.api.v1.DoseRangeByWeightFunction
        range:
          $ref: '#/components/schemas/DrugQuantityRange'
        perUnit:
          $ref: '#/components/schemas/MassQuantity'
      example:
        perUnit:
          dimension: Mass
          value: 1
          symbol: kg
        _type: models.api.v1.DoseRangeByWeightFunction
        range:
          min:
            quantity:
              dimension: volume
              value: 3
              symbol: ml
          max:
            quantity:
              dimension: volume
              value: 2
              symbol: ml
    DoseByClass:
      description: dose calculated by class
      required:
        - _type
        - animalClasses
      type: object
      properties:
        _type:
          type: string
          enum:
            - models.api.v1.DoseByClass
        animalClasses:
          type: array
          items:
            type: object
            required:
              - animalClass
              - sizefunction
            properties:
              animalClass:
                type: string
                description: name of class
              sizefunction:
                description: function to calculate dose size
                type: object
                oneOf:
                  - $ref: '#/components/schemas/FixedDoseFunction'
                  - $ref: '#/components/schemas/DoseRangeFunction'
                  - $ref: '#/components/schemas/DoseByWeightFunction'
                  - $ref: '#/components/schemas/DoseRangeByWeightFunction'
                  - $ref: '#/components/schemas/LoadingDoseByWeightFunction'
      example: '{"_type":"models.api.v1.DoseByClass","animalClasses":[{"animalClass":"Jabberwocks","sizeFunction":{"unit":"mg","size":3.2,"_type":"models.api.v1.DrugQuantity"}},{"animalClass":"Borogoves","sizeFunction":{"_type":"models.api.v1.DoseRangeFunction","maxDose":{"size":20,"unit":"ml"},"minDose":{"size":10,"unit":"ml"}}}]}'
    SequenceFunction:
      description: function to calculate times for a series of doses
      oneOf:
        - $ref: '#/components/schemas/SeqSingleDose'
        - $ref: '#/components/schemas/SeqPerDay'
        - $ref: '#/components/schemas/SeqPerDayRange'
        - $ref: '#/components/schemas/SeqInterval'
        - $ref: '#/components/schemas/SeqSeries'
    SeqSingleDose:
      description: a single dose
      required:
        - _type
      type: object
      properties:
        _type:
          type: string
          description: wip
          enum:
            - models.api.v1.SeqSingleDose
          example: models.api.v1.SeqSingleDose
    SeqSeries:
      description: an ordered sequence of doses at times specified as time since initiation of the protocol.
      required:
        - _type
        - intervals
      type: object
      properties:
        _type:
          type: string
          enum:
            - models.api.v1.SeqSeries
          example: models.api.v1.SeqSeries
        intervals:
          type: array
          items:
            description: ISO-8601 duration from initiation or previous dose
            type: string
            format: duration
            example:
              - PT0S
              - PT3H
              - PT24H
    SeqPerDay:
      required:
        - _type
        - frequency
        - totalDoses
      description: a series of equally spaced doses specified by the total number of doses and an integer number of doses per day.
      type: object
      properties:
        _type:
          type: string
          enum:
            - models.api.v1.SeqPerDay
        frequency:
          type: integer
          default: 1
        totalDoses:
          type: integer
          default: 1
      example:
        totalDoses: 3
        _type: models.api.v1.SeqPerDay
        frequency: 2
    SeqPerDayRange:
      required:
        - _type
        - frequency
        - minDoses
        - maxDoses
      description: a series of equally-spaced doses specified by the total number of doses and an integer number of doses per day.
      type: object
      properties:
        _type:
          type: string
          enum:
            - models.api.v1.SeqPerDayRange
          example: models.api.v1.SeqPerDayRange
        frequency:
          type: integer
          default: 1
          example: 2
        minDoses:
          type: integer
          default: 3
        maxDoses:
          type: integer
          default: 1
          example: 9
    SeqInterval:
      required:
        - _type
        - totalDoses interval
      description: a series of equally-spaced doses specified by the total number of doses and time between sequential doses.
      type: object
      properties:
        _type:
          type: string
          enum:
            - models.api.v1.SeqInterval
          example: models.api.v1.SeqInterval
        totalDoses:
          type: integer
          default: 1
          example: 3
        interval:
          description: ISO-8601 duration from initiation or previous dose
          type: string
          format: duration
          default: PT8H
          example: PT8H
    Tag:
      description: keyword or tag for classification
      type: object
      properties:
        code:
          type: string
          maxLength: 15
          example: Example-code
    Eligibility:
      description: |
        A class of animal for which a protocol may be used. Normally the `name` field is all that is shown in the UI, but the `id` is used internally to identify each Eligibility, which should be treated as an immutable object. Changes to the array of Eligibilities in a Protocol are done by changing the array of `id` numbers. Changes to other fields will have no effect at the persistent layer.
      type: object
      required:
        - id
      properties:
        id:
          description: wip
          type: integer
          example: 1
        name:
          description: A type of animal which is eligible to be treated using a protocol having this Eligibility.
          type: string
          example: Beef Cattle
        fdaSpecies:
          $ref: '#/components/schemas/fdaSpecies'
    Promise:
      description: An act which must be executed on or after enrollment of a Case to a Prescription
      type: object
      required:
        - _type
        - name
        - description
        - query
        - when
      properties:
        _type:
          description: server data type to which this Promise will be mapped
          type: string
          enum:
            - models.api.v1.IdPromise
            - models.api.v1.AffirmationPromise
            - models.api.v1.BooleanPromise
            - models.api.v1.StringPromise
            - models.api.v1.MassPromise
            - models.api.v1.CategoryPromise
        id:
          description: UUID assigned to the promise itself by the server
          type: string
          format: uuid
        name:
          description: promise name for the doctor
          type: string
        descrip:
          description: promise description for the client
          type: string
        query:
          description: question to be answered by client
          type: string
          format: html
        when:
          description: ISO-8601 duration from initiation when promise must be fulfilled
          type: string
          format: duration
          default: PT0H
        response:
          description: data supplied by the client to fulfill promise
          type: string
        responseBy:
          description: User ID of person supplying response data
          type: integer
        responseTime:
          description: timestamp for response data
          type: string
        notify:
          description: notify prescribing doctor when completed
          type: boolean
          default: false
        sigRequired:
          description: require signature of respondant
          type: boolean
          default: false
    IdPromise:
      description: identification of animal is required to enroll a case
      type: object
      required:
        - _type
      allOf:
        - $ref: '#/components/schemas/Promise'
        - type: object
          required:
            - animalId
            - initiationDate
          properties:
            animalId:
              type: string
            initiationDate:
              type: string
              format: dateTime
            _type:
              type: string
              enum:
                - models.api.v1.IdPromise
    WithholdPromise:
      description: withholding time guard
      type: object
      allOf:
        - $ref: '#/components/schemas/IdPromise'
        - type: object
          required:
            - target
            - until
          properties:
            target:
              type: string
              enum:
                - meat
                - milk
                - eggs
            after:
              type: string
              format: dateTime
              description: target must be withheld from marketing until after this
    ResultPromise:
      description: return some result
      type: object
      allOf:
        - $ref: '#/components/schemas/IdPromise'
        - type: object
          required:
            - what
            - result
          properties:
            what:
              type: string
              format: html
            after:
              type: string
              format: dateTime
              description: result should be returned after this
            before:
              type: string
              format: dateTime
              description: result should be returned before this
            result:
              type: string
    Diagnosis:
      description: |
        A medical diagnosis for which a Protocol may be used. Normally the `name` field is all that is shown in the UI, but the `id` is used internally to identify each Diagnosis, which should be treated as an immutable object. Changes to the array of Diagnoses in a Protocol are achieved by changing the array of `id` numbers. Changes to other fields will have no effect at the persistent layer.
      type: object
      properties:
        id:
          type: integer
          description: unique identifier for Diagnosis
          example: 8
        code:
          type: string
          maxLength: 25
          description: wip should this be an enum?
          example: PAIN
        name:
          type: string
          description: free-form text description of the Diagnosis
          example: 'Pain/inflammation (musculoskeletal), treatment'
    CaseDefinition:
      description: 'information used at the time of case selection to determine whether a particular protocol may be enrolled and the protocol initiated for a particular animal or group of animals (the Case). The Case may be enrolled with the Protocol **only** if the Case meets all requirements of the CaseDefinition and none of the prohibitions. Other information may be advisory, and used at the discretion of the person doing enrollment.'
      type: object
      properties:
        requireId:
          type: boolean
          description: the Case must include specific ID/s of animal/s to be enrolled.
          default: false
        requireMor:
          type: boolean
          description: 'if true, the MOR enrolling the Case must be identified with a Signature.'
          default: false
        contraindications:
          description: considerations that prohibit or suggest against use of this Protocol.
          type: string
          format: html
          default: ''
          example: "<p>prohibited in animals older than than 24 months</p>"
        medical:
          description: medical considerations in selecting and implementing this Protocol
          type: string
          format: html
          example: 'if fever is present, consider Protocol 12345 instead.'
        economic:
          description: economic considerations in selecting and implementing this Protocol
          type: string
          format: html
          default: ''
          example: 'culling should be considered as an alternative, as milk production is unlikely to return to normal after treatment'
        note:
          description: optional note
          type: string
          format: html
          default: ''
          example: '<p>overcrowding may be contributing to issues</p>'
    CaseData:
      description: 'wip tbd'
      type: object
      properties:
        id:
          type: integer
          example: 0
          description: wip unique identifier for case
        rxId:
          type: string
          description: wip unique identifier for ***
          example: gG3pBCR1GCMKm89c
        caseData:
          oneOf:
            - $ref: '#/components/schemas/IdData'
            - $ref: '#/components/schemas/WeightData'
            - $ref: '#/components/schemas/PreferredDoseData'
    IdData:
      description: 'wip tbd'
      properties:
        animalId:
          type: string
          description: free-form text description of the animal
          example: Bossie IdData
        initiationTime:
          type: string
          format: date-time
          example: '2020-01-10T10:30:37Z'
          description: wip ISO-8601-formatted datetime added by the server when the animal is first saved.
    WeightData:
      description: 'wip tbd'
      properties:
        animalId:
          type: string
          description: free-form text description of the animal
          example: Bossie IdData
        weight:
          $ref: '#/components/schemas/MassQuantity'
        initiationTime:
          type: string
          format: date-time
          description: wip ISO-8601-formatted datetime added by the server when the instance of the animal's weight is first saved.
          example: '2020-04-10T10:30:37Z'
    PreferredDoseData:
      description: 'wip'
      properties:
        _type:
          type: string
          enum:
            - models.api.v1.PreferredDoseData
        animalId:
          type: string
          description: wip free-form text note identifying this entry
          example: Bossie PreferredDoaseData
        preferredDose:
          $ref: '#/components/schemas/DrugQuantity'
        initiationTime:
          type: string
          format: date-time
          description: wip ISO-8601-formatted datetime added by the server when the preferredDose was administered ??
          example: '2020-04-10T10:30:37Z'
    Signature:
      description: an electronic signature
      required:
        - user
        - timestamp
      properties:
        user:
          $ref: '#/components/schemas/User'
        timestamp:
          description: ISO-8601-formatted datetime added by the server recording the time at which the document was signed
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
    DrugQuantity:
      required:
        - quantity
      properties:
        quantity:
          oneOf:
            - $ref: '#/components/schemas/MassQuantity'
            - $ref: '#/components/schemas/VolumeQuantity'
            - $ref: '#/components/schemas/DimensionlessQuantity'
      example:
        quantity:
          dimension: Mass
          value: 3
          symbol: oz
    DrugQuantityRange:
      required:
        - min
        - max
      properties:
        min:
          $ref: '#/components/schemas/DrugQuantity'
        max:
          $ref: '#/components/schemas/DrugQuantity'
      example:
        min:
          quantity:
            dimension: Volume
            value: 3
            symbol: ml
        max:
          quantity:
            dimension: Volume
            value: 345
            symbol: ml
    MassQuantity:
      required:
        - dimension
        - value
        - symbol
      properties:
        dimension:
          type: string
          enum:
            - Mass
        value:
          type: number
          minimum: 0
          default: 1
          exclusiveMinimum: true
          example: 50
        symbol:
          $ref: '#/components/schemas/MassUnit'
    MassUnit:
      description: unit of mass or weight
      type: string
      enum:
        - lb
        - t
        - dwt
        - gr
        - mg
        - mcg
        - oz
        - g
        - kg
      example: kg
    VolumeQuantity:
      required:
        - dimension
        - value
        - symbol
      properties:
        dimension:
          type: string
          description: wip
          example: Volume
          enum:
            - Volume
        value:
          type: number
          minimum: 0
          example: 3
          exclusiveMinimum: true
        symbol:
          $ref: '#/components/schemas/VolumeUnit'
    VolumeUnit:
      description: unit of Volume or Weight
      type: string
      example: ml
      enum:
        - pt
        - tbsp
        - Âµl
        - nl
        - oz
        - dl
        - ml
        - qt
        - L
        - gal
        - c
        - tsp
    DimensionlessQuantity:
      required:
        - dimension
        - value
        - symbol
      properties:
        dimension:
          type: string
          example: Dimensionless
          enum:
            - Dimensionless
        value:
          type: number
          minimum: 0
          example: 3
          exclusiveMinimum: true
        symbol:
          $ref: '#/components/schemas/DimensionlessUnit'
    DimensionlessUnit:
      description: Dimensionless unit (each)
      type: string
      enum:
        - ea
        - '%'
        - dz
      example: ea
    LabelClaim:
      properties:
        id:
          type: integer
          description: unique identifier for label
          example: 1
        nada:
          type: string
          description: wip
          example: 200-308
        eligibility:
          type: string
          description: wip free-form description of species/variant eligibility
          example: horses
        exId:
          type: integer
          description: wip
          example: 2500
        exCode:
          type: string
          description: wip
          example: wip
        fdaSpecies:
          $ref: '#/components/schemas/fdaSpecies'
        diagnosis:
          type: string
          description: wip
          example: pain (colic), symptomatic treatment
        dxId:
          type: integer
          description: wip
          example: 2002
        dxCode:
          type: string
          description: wip
          example: '2002'
        product:
          type: string
          description: product trade name
          example: Prevailâ„¢ Flunixin Meglumine Injection
        productId:
          type: integer
          description: unique identifier for the product described
          example: 1315018
        sequenceFunction:
          $ref: '#/components/schemas/SequenceFunction'
        sizeFunction:
          $ref: '#/components/schemas/SizeFunction'
        _dose:
          type: string
          description: free-form text note on dosage
          example: 3.0 ml per kg repeat in 6 hours and again in 24 hours
        dosageId:
          type: integer
          description: wip
          example: wip
        route:
          type: string
          description: wip
          example: intr-corporeal
        raId:
          type: integer
          description: wip
          example: 21
        wtMeatHrs:
          description: wip
          type: integer
          example: 22
        wtMilkHrs:
          type: integer
          description: wip
          example: 5
        wtNote:
          type: string
          description: wip
          example: wip
    PrescriptionRequest:
      description: 'a Prescription request, before it is recorded and timestamped'
      required:
        - size
        - unit
      properties:
        protocol:
          $ref: '#/components/schemas/Protocol'
        morId:
          type: integer
        expiration:
          type: string
          format: date-time
        metadata:
          type: string
        status:
          type: string
      example:
        protocol:
          ownerId: 0
          name: example protocol
          shortname: EXamp
          created: '2020-01-10T22:20:39Z'
          edited: '2020-01-10T22:20:39Z'
          status: UNKNOWN
          withhold:
            hoursMeat: 0
            hoursMilk: 0
            note: ''
          instructions:
            considerations: think first
            restrictions: always
            dothis: execute protocol
            recordthis: case data
            success: good
            failure: bad
            references: ref
          shareAll: false
          shareClonable: false
          caseDefinition:
            pxId: 0
            requireID: true
            requireMOR: true
            medical: really sick
            economic: client in credit
          treatments:
            - id: 0
              ownerId: 0
              description: sample treatment
              note: this is an off-label Treatment
              eligibilities:
                - id: 1
                  name: Beef Cattle
                  fda: beef_cattle
              tags:
                - id: 1
                  code: EXAMPLE
              product: MiracleMed
              _dose: 3.0 ml per kg repeat in 6 hours and again in 24 hours
              route: intr-corporeal
              sequenceFunction:
                intervals:
                  - PT6H
                  - PT24H
                _type: models.api.v1.SeqSeries
              sizeFunction:
                dose:
                  quantity:
                    dimension: Volume
                    value: 3
                    symbol: ml
                perUnit:
                  dimension: Mass
                  value: 1
                  symbol: kg
                _type: models.api.v1.DoseByWeightFunction
              doseNote: some note on dose
              wtMeatHrs: 22
              wtMilkHrs: 5
              wtNote: example
          tags:
            - id: 1
              code: EXAMPLE
          diagnoses:
            - id: 8
              code: PAIN
              name: 'Pain/inflammation (musculoskeletal), treatment'
          eligibilities:
            - id: 1
              name: Beef Cattle
              fda: BeefCattle
          promises:
            - id: 1
              name: test user
              code: EXAMPLE
        morId: 0
        status: DEPRECATED
        metadata: []
    Prescription:
      required:
        - size
        - unit
      properties:
        rxId:
          type: string
          description: wip
          example: gG3pBCR1GCMKm89c
        protocol:
          $ref: '#/components/schemas/Protocol'
        vorId:
          type: integer
          description: wip
          example: aZ3pBCR1GCMKm89c
        morId:
          type: integer
          description: wip
          example: tP3pBCR1GCMKm89c
        expiration:
          type: string
          format: date-time
          description: ISO-8601-formatted datetime defining expiration date
          example: '2021-01-10T10:30:37Z'
        created:
          type: string
          format: date-time
          description: ISO-8601-formatted datetime added by the server when prescription is first saved
          example: '2021-08-10T10:30:37Z'
        metadata:
          type: string
          description: wip
          example: wip
        status:
          type: string
          description: wip
          example: wip
          deprecated: true
    Comment:
      required:
        - comment
      properties:
        userId:
          description: set null or zero if User wishes to be anonymous
          type: integer
          default: null
        public:
          description: 'if false, comment is private to site managers'
          type: boolean
          default: false
        comment:
          type: string
    GreenbookHeader:
      required:
        - ndc
        - proprietery
        - nonProp
        - ingredients
        - labeler
        - productType
        - marketCat
        - appNumber
        - link
        - status
        - lastChanged
      properties:
        ndc:
          type: string
        proprietery:
          type: string
        nonProp:
          type: string
        ingredients:
          type: string
        labeler:
          type: string
        productType:
          type: string
        marketCat:
          type: string
        appNumber:
          type: string
        link:
          type: string
        status:
          type: integer
        lastChanged:
          type: string
          format: date-time
    fdaSpecies:
      type: array
      description: A class of animals recognized by the FDA. In FDA literature this is called a "species", which conflicts with other usage of that word. "fdaSpecies" in the labeling domain usually corresponds with "Eligibility" in the Protocol domain.
      items:
        type: string
        enum:
          - beef_cattle
          - veal
          - dairy_cattle
          - cats
          - dogs
          - horses
          - fish
          - goats
          - sheep
          - chickens
          - turkeys
          - swine
          - catfish
          - gamebirds
          - llamas
          - salmon
          - emus
          - bison
          - other
          - unidentified
        example:
          - beef_cattle
  securitySchemes:
    AuthToken:
      type: apiKey
      in: header
      name: X-Auth-Token
      description: 'Uses JWT token stored in request header, set to expire after 24 hours.'
  responses:
    '503':
      description: Service Unavailable
      content:
        application/problem+json:
          schema:
            $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
    OK:
      description: 200 - success
    Created:
      description: 201 - success; entity created
    Accepted:
      description: 202 - the request was successful and will be processed asynchronously
    No-Content:
      description: 204 - the request was successful and will be processed asynchronously
    Multi-Status:
      description: 207 - the response body contains multiple items of status information for different parts of a batch/bulk request
    See-Other:
      description: 303 - the request was successful and will be processed asynchronously
    Bad-Request:
      description: 400 - generic / unknown error
    Unauthorized:
      description: 401 - users must log in
    Forbidden:
      description: 403 - the user is not authorized to use this resource
    Not-found:
      description: 404 - resource is not found
    Unsupported-media-type:
      description: 415 - e.g., request body without content type
    Server-Error:
      description: 500 - unexpected server execution problem
    Not-Implemented:
      description: 501 - endpoint not yet implemented
    Unavailable:
      description: 503 - service is (temporarily) unavailable
  examples:
    testVOR:
      summary: User with VOR Usertype
      description: VOR test user prepopulated into testing db
      value:
        firstname: Test
        uname: testVOR
        id: 1
        userType: VOR
        suffix: DVM
        email: testVOR@dairysight.com
        lastname: Vet
    testMOR:
      summary: User with VOR Usertype
      description: VOR test user prepopulated into testing db
      value:
        firstname: Test
        uname: testMOR
        id: 2
        userType: MOR
        email: testMOR@dairysight.com
        lastname: Manager
    protocolShare:
      value:
        px-id: 1
        share-to: 2
        read-only: false
    protocol-1:
      summary: ""
      value: {"ownerId":0,"name":"example protocol","shortname":"EXamp","created":"2020-01-10T22:20:39Z","edited":"2020-01-10T22:20:39Z","status":"UNKNOWN","withhold":{"hoursMeat":0,"hoursMilk":0,"note":""},"instructions":{"considerations":"think first","restrictions":"always","dothis":"execute protocol","recordthis":"case data","success":"good","failure":"bad","references":"ref"},"shareAll":false,"caseDefinition":{"pxId":0,"requireID":true,"requireMOR":true,"medical":"really sick","economic":"lotsa cash"},"treatments":[{"id":0,"ownerId":0,"description":"sample treatment","note":"this is an off-label Treatment","eligibilities":[{"id":1,"name":"Beef Cattle","fda":"BeefCattle"}],"tags":[{"id":1,"code":"EXAMPLE"}],"product":"MiracleMed","_dose":"3.0 ml per kg repeat in PT0S List(, 6 hours)","route":"intr-corporeal","sequenceFunction":{"intervals":["PT0S","PT6H"],"_type":"models.api.v1.SeqSeries"},"sizeFunction":{"dose":{"quantity":{"dimension":"Volume","value":3,"symbol":"ml"}},"perUnit":{"dimension":"Mass","value":1,"symbol":"kg"},"_type":"models.api.v1.DoseByWeightFunction"},"doseNote":"some note on dose","wtMeatHrs":22,"wtMilkHrs":5,"wtNote":"example"}],"tags":[{"id":1,"code":"EXAMPLE"}],"diagnoses":[{"id":2,"code":"PYOMETRA","name":"Pyometra/chronic endometritis, treatment"}],"eligibilities":[{"id":1,"name":"Beef Cattle","fda":"BeefCattle"}],"promises":[{"id":1,"name":"test user","code":"EXAMPLE"}]}
    label-1:
      summary: label with id=1
      value:
        id: 1
        nada: 200-308
        eligibility: Horses
        exId: 2500
        exCode: '2500'
        fdaSpecies: Horses
        diagnosis: 'Pain (colic), symptomatic treatment'
        dxId: 2002
        dxCode: '2002'
        product: Prevailâ„¢ Flunixin Meglumine Injection
        productId: 1315018
        dose: 0.5 mg/lb (1 mL/100 lb) b.w. Give IV for fast relief. Repeat when colic signs recur.
        dsId: 10656
        roa: I.V.
        raId: 21
tags:
  - name: editor
    description: used by Protocol Editor SPA
  - name: label
    description: depends on drug label data (fx db)
  - name: proposed
    description: proposed but not yet implemented
  - name: implemented
    description: endpoint is implemented on server
  - name: tested
    description: Postman tests implemented and passing
  - name: monitored
    description: API is tested and monitored
  - name: admin
    description: wip
  - name: idempotent
    description: wip

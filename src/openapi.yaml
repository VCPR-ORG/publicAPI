openapi: 3.0.3
info:
  title: VCPR.ORG Protocol Editor API
  version: 2.0.2
  contact:
    name: Jim Ehrlich, DVM
    url: https://github.com/jehrlich/VCPR_API
    email: jehrlich@vcpr.org
  description: >-
    API serving the Veterinary Protocol Manager&trade; application. &copy;
    DairySight LLC, Argyle NY 2020
servers:
  - description: Production server, uses production database.
    url: https://VCPR.ORG
  - description: Staging server, uses staging database.
    url: https://stage.VCPR.ORG
  - description: Test server, uses regenerated test database.
    url: https://test.VCPR.ORG
  - description: Local docker container, uses regenerated test database.
    url: http://localhost
security:
  - authToken: []
paths:
  /api/users/logins:
    post:
      operationId: userLogin
      tags:
        - User
      security: []
      summary: user login
      description: >-
        This endpoint authenticates a User from an `identifier` (normally an
        email address) and `password`. It also identifies the application making
        requests from the `apikey`. The response returns the User object for the
        logged-in User and a token for use in future secured requests, as well
        as a `fileSignature` and `filePolicy` which may be used for access to
        images stored on FileStack.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - apikey
                - identifier
                - password
              properties:
                apikey:
                  type: string
                  description: >-
                    An API key assigned to an application for access to this
                    API. To request an API key please contact the system
                    administrator.
                  example: t0CGzpQ4cgu1OBy44sBt
                identifier:
                  type: string
                  description: '`User.Username`, normally the same as `User.email`'
                  example: testVOR
                password:
                  type: string
                  description: >-
                    User password any characters or numbers allowed, with a
                    minimum length of 10.
                  minLength: 6
                  example: tVpass
      responses:
        '200':
          description: Success – logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulLogin'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      operationId: userRenewToken
      tags:
        - User
      summary: renew token
      description: >-
        This endpoint renews the User's access token. Response returns the User
        object for the logged-in User and a 24-hr token for use in future
        secured requests. It includes a `fileSignature` and `filePolicy` which
        may be used for access to images stored on FileStack.
      responses:
        '200':
          description: Success – token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulLogin'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/protocols/prescriptions/to:
    get:
      operationId: getRxTo
      tags:
        - Prescription
      summary: get my prescriptions
      description: get prescriptions prescribed to the current User.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: array of prescriptions accessible to current User
                properties:
                  prescriptions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Prescription'
  /api/protocols/prescriptions/{id}:
    get:
      operationId: getPrescription
      tags:
        - Prescription
      summary: get prescription by ID
      description: This endpoint retrieves a Prescription by `prescription.id`.
      parameters:
        - name: id
          in: path
          schema:
            type: string
          example: Vi1y9kbpEj7Upqy7
          required: true
          description: Prescription ID key
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  prescription:
                    $ref: '#/components/schemas/Prescription'
            text/html:
              schema:
                type: string
            application/pdf:
              schema:
                type: string
                format: binary
  /api/labels/inserts/{lxId}:
    get:
      operationId: getPackageInsert
      tags:
        - Prescription
      summary: get package insert
      description: This endpoint returns the label package insert.
      parameters:
        - name: lxId
          in: path
          schema:
            type: integer
          required: true
          description: label ID
          example: 32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: html
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/spl/{ndc}:
    get:
      operationId: getGbdLinkByNDC
      x-no-test: >-
        probably should return a JSON response, but need to update Editor first;
        html page returned OK
      tags:
        - Pharmacy
        - Untested
      summary: get detail of a Greenbook Drug as a link
      description: This
      parameters:
        - name: ndc
          in: path
          schema:
            type: string
          required: true
          description: >-
            unique hyphenated number with up to 10 digits in 2 or 3 segments as
            labelerCode-productCode-packageCode. packageCode may not be needed.
          example: 0010-3832
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema:
                description: Standard Product Label as html
                type: string
                format: html
        '303':
          description: Redirect to SPL file served from FDA server
          content:
            text/xml:
              schema:
                description: XML SPL data file served from FDA server
                type: string
                format: xml
  /api/spl/{ndc}/{image}:
    get:
      operationId: getGbdL
      x-not-test: test
      tags:
        - Pharmacy
        - Untested
      summary: get detail of a Greenbook Drug as a link
      description: This
      parameters:
        - name: ndc
          in: path
          schema:
            type: string
          required: true
          description: >-
            unique hyphenated number with up to 10 digits in 2 or 3 segments as
            labelerCode-productCode-packageCode. packageCode may not be needed.
          example: 0010-3495
        - name: image
          in: path
          schema:
            type: string
          required: true
          description: name of image file
          example: 601588-image-fake.jpg
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: URL link to XML SPL data file
                type: string
                format: url
        '303':
          description: Redirect to SPL file served from FDA server
          content:
            text/xml:
              schema:
                description: XML SPL data file served from FDA server
                type: string
                format: xml
  /api/prescriptions/cases:
    post:
      operationId: enrollCase
      tags:
        - User
      summary: user login
      description: Enroll a case
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Case'
      responses:
        '200':
          description: Success – recorded Protocol
          content:
            application/json:
              schema:
                type: object
                properties:
                  case:
                    $ref: '#/components/schemas/Case'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      operationId: myCases
      tags:
        - Case
      summary: renew token
      description: Get all current cases for this user
      responses:
        '200':
          description: Success – token refreshed
          content:
            application/json:
              schema:
                properties:
                  cases:
                    type: array
                    items:
                      $ref: '#/components/schemas/Case'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/prescriptions/:rxId/cases:
    get:
      operationId: myCases
      tags:
        - Case
      summary: renew token
      description: Get all current cases for this prescription and this user
      parameters:
        - name: rxId
          in: path
          schema:
            type: string
          required: true
          description: prescription uuid
          example: gG3pBCR1GCMKm89c
      responses:
        '200':
          description: Success – token refreshed
          content:
            application/json:
              schema:
                properties:
                  cases:
                    type: array
                    items:
                      $ref: '#/components/schemas/Case'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/users/tasks:
    post:
      operationId: executeCase
      tags:
        - Case
      summary: user login
      description: Enroll a case
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalTask'
      responses:
        '200':
          description: Success – recorded Protocol
          content:
            application/json:
              schema:
                type: object
                properties:
                  case:
                    $ref: '#/components/schemas/Case'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      operationId: myCases
      tags:
        - Case
      summary: renew token
      description: Get all current cases for this user
      responses:
        '200':
          description: Success – token refreshed
          content:
            application/json:
              schema:
                properties:
                  cases:
                    type: array
                    items:
                      $ref: '#/components/schemas/Case'
        '401':
          $ref: '#/components/responses/Unauthorized'
components:
  securitySchemes:
    authToken:
      type: apiKey
      in: header
      name: X-Auth-Token
      description: Uses JWT token stored in request header.
  schemas:
    UserType:
      type: string
      description: >
        an ordered list of User types associated with privilege levels:

        <br>

        * SAOR: a system administrator with top level privileges

        * VOR: a veterinarian who may create and prescribe protocols

        * MOR: a farm manager to whom protocols may be prescribed, and who may
        create Cases in a protocol

        * TOR: a farm technician who may execute assigned protocols for assigned
        cases

        * FARM: an account aggregating MOR and TOR Users

        * CLINIC: an account aggregating multiple VOR Users who work together

        * UNCONFIRMED: an account that has been requested but not confirmed by
        the owner

        * UNVOR: a User who requests VOR status, with neither email or admin
        approval

        * UNMOR: a User who requests MOR status but email not yet confirmed

        * PREVOR: a confirmed User who requests VOR status but still lacks
        either email confirmation or approval by admin

        * REMOVED: the record of a User who is no longer active and may not log
        in
      enum:
        - SAOR
        - VOR
        - MOR
        - TOR
        - FARM
        - CLINIC
        - UNCONFIRMED
        - PREVOR
        - UNVOR
        - UNMOR
        - REMOVED
      example: VOR
    User:
      description: a User of a specific `usertype` class
      properties:
        id:
          type: integer
          description: User ID number
          example: 1
        uname:
          description: username
          type: string
          example: testVOR
        userType:
          $ref: '#/components/schemas/UserType'
        email:
          type: string
          format: email
          example: testVOR@dairysight.com
        firstname:
          type: string
          example: Test
        lastname:
          type: string
          example: Vet
        suffix:
          type: string
          description: degree or qualifier following the name
          example: DVM
      required:
        - id
        - userType
        - email
        - firstname
        - lastname
        - suffix
    SuccessfulLogin:
      description: User object and generated auth token
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: >-
            add this token in X-Auth-Token header to authenticate future
            requests
          example: >-
            eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJleUp3Y205MmFXUmxja2xFSWpvaVkzSmxaR1Z1ZEdsaGJITWlMQ0p3Y205MmFXUmxja3RsZVNJNkluUmxjM1JXVDFJaWZRPT0iLCJpc3MiOiJwbGF5LXNpbGhvdWV0dGUiLCJle***...
        filePolicy:
          type: string
          description: policy object for use in embedded image files, expires in 24 hr
          example: 3da8c83495cb00d216369a355322078106ebc2e5eac78333eb90d00de5611d9a
        fileSignature:
          type: string
          description: signature for file policy object
          example: eyJleHBpcnkiOjE1Nzg3NTY2MDIsIm1heFNpemUiOjEwMDAwMDAwfQ==
      x-postman-variables:
        - type: save
          name: token
          path: .token
    Error:
      type: object
      description: error response per RFC 7807
      required:
        - title
        - status
      properties:
        errorType:
          type: string
          description: a URI identifier that categorizes the error
          example: /errors/incorrect-user-pass
        title:
          type: string
          description: A brief, human-readable message about the error
          example: incorrect username or password
        status:
          type: integer
          description: HTTP status code
          example: 404
        detail:
          type: string
          description: a human-readable description of the specific error
          example: Authentication failed due to incorrect username or password.
        instance:
          type: string
          description: a URI that identifies the specific occurrence of the error
          example: /login/log/abc123
    ProtocolStatus:
      type: string
      description: >
        status markers for protocols, in order of normal usage flow:


        - UNKNOWN: initial status when a protocol is being designed

        - VALIDATED: currently not used, for use when a validation process is
        implemented

        - PRESCRIBED: after a protocol has been prescribed for at least one
        client

        - INITIATED: after a protocol has been initiated (i.e., has one or more
        Cases)

        - RECALLED: protocol may no longer be prescribed and existing
        prescriptions are recalled

        - DEPRECATED: protocol has been "deleted" by the owner
      enum:
        - PRESCRIBED
        - VALIDATED
        - INITIATED
        - DEPRECATED
        - RECALLED
        - UNKNOWN
      example: PRESCRIBED
    Withhold:
      description: >-
        duration after last treatment during which some act is prohibited. Most
        often this restricts when meat or milk may be sold for food.
      required:
        - duration
        - prohibition
      properties:
        hoursMeat:
          type: number
          example: 22
          description: number of hours that must pass between exposure and slaughter
        hoursMilk:
          type: number
          example: 5
          description: >-
            number of hours that must pass between exposure and extracting milk
            for consumption
        note:
          type: string
          description: free-form text note
          format: html
          example: <p>improvement apparent</p>
    Instructions:
      description: instructions to execute a protocol
      type: object
      properties:
        considerations:
          type: string
          format: html
          example: <p>This is just an example, not a real protocol.</p>
        restrictions:
          type: string
          format: html
          example: <p>Not for use on real animals.</p>
        dothis:
          type: string
          format: html
          example: <h3>Examinations to perform</h3>
        recordthis:
          type: string
          format: html
          example: <p>record every step in your notebook.</p>
        success:
          type: string
          format: html
          example: <p>All problems are gone</p>
        failure:
          type: string
          format: html
          example: <p>One or more problems remain</p>
        references:
          type: string
          format: html
          example: <a href="https://en.wikipedia.org/wiki/Rickrolling">Wikipedia</a>
    CaseDefinition:
      description: >-
        information used at the time of case selection to determine whether a
        particular protocol may be enrolled and the protocol initiated for a
        particular animal or group of animals (the Case). The Case may be
        enrolled with the Protocol **only** if the Case meets all requirements
        of the CaseDefinition and none of the prohibitions. Other information
        may be advisory, and used at the discretion of the person doing
        enrollment.
      type: object
      properties:
        requireId:
          type: boolean
          description: the Case must include specific ID/s of animal/s to be enrolled
          default: false
        requireMor:
          type: boolean
          description: >-
            if true, the MOR enrolling the Case must be identified with a
            Signature
          default: false
        contraindications:
          description: considerations that prohibit or suggest against use of this Protocol
          type: string
          format: html
          default: ''
          example: <p>prohibited in animals older than than 24 months</p>
        medical:
          description: medical considerations in selecting and implementing this Protocol
          type: string
          format: html
          example: if fever is present, consider Protocol 12345 instead.
        economic:
          description: economic considerations in selecting and implementing this Protocol
          type: string
          format: html
          default: ''
          example: >-
            culling should be considered as an alternative, as milk production
            is unlikely to return to normal after treatment
        note:
          description: optional note
          type: string
          format: html
          default: ''
          example: <p>overcrowding may be contributing to issues</p>
    fdaSpecies:
      type: array
      description: >-
        a class of animals recognized by the FDA. In FDA literature this is
        called a "species", which conflicts with the typical usage of that word.
        "fdaSpecies" in the labeling domain usually corresponds with
        "Eligibility" in the Protocol domain.
      items:
        type: string
        enum:
          - beef_cattle
          - veal
          - dairy_cattle
          - cats
          - dogs
          - horses
          - fish
          - goats
          - sheep
          - chickens
          - turkeys
          - swine
          - catfish
          - gamebirds
          - llamas
          - salmon
          - emus
          - bison
          - other
          - unidentified
        example:
          - beef_cattle
          - dairy_cattle
    Eligibility:
      description: >
        A class of animal for which a protocol may be used. Normally the `name`
        field is all that is shown in the UI, but the `id` is used internally to
        identify each Eligibility, which should be treated as an immutable
        object. Changes to the array of Eligibilities in a Protocol are done by
        changing the array of `id` numbers. Changes to other fields will have no
        effect at the persistent layer.
      type: object
      required:
        - id
      properties:
        id:
          description: Eligibility ID number
          type: integer
          example: 1
        name:
          description: >-
            A type of animal which is eligible to be treated using a protocol
            having this Eligibility
          type: string
          example: Beef Cattle
        fdaSpecies:
          $ref: '#/components/schemas/fdaSpecies'
    DoseId:
      properties:
        doseId:
          type: integer
          description: key to a label dosage
          example: wip
    SeqSingleDose:
      description: a single dose
      required:
        - _type
      type: object
      properties:
        _type:
          type: string
          description: wip
          enum:
            - models.SeqSingleDose
          example: models.SeqSingleDose
    SeqPerDay:
      required:
        - _type
        - frequency
        - totalDoses
      description: >-
        a series of equally-spaced doses specified by the total number of doses
        and an integer number of doses per day
      type: object
      properties:
        _type:
          type: string
          enum:
            - models.SeqPerDay
        frequency:
          type: integer
          default: 1
        totalDoses:
          type: integer
          default: 1
      example:
        totalDoses: 3
        _type: models.SeqPerDay
        frequency: 2
    SeqPerDayRange:
      required:
        - _type
        - frequency
        - minDoses
        - maxDoses
      description: >-
        a series of equally-spaced doses specified by the total number of doses
        and an integer number of doses per day
      type: object
      properties:
        _type:
          type: string
          enum:
            - models.SeqPerDayRange
          example: models.SeqPerDayRange
        frequency:
          type: integer
          default: 1
          example: 2
        minDoses:
          type: integer
          default: 3
        maxDoses:
          type: integer
          default: 1
          example: 9
    SeqInterval:
      required:
        - _type
        - totalDoses interval
      description: >-
        a series of equally-spaced doses specified by the total number of doses
        and time between sequential doses
      type: object
      properties:
        _type:
          type: string
          enum:
            - models.SeqInterval
          example: models.SeqInterval
        totalDoses:
          type: integer
          default: 1
          example: 3
        interval:
          description: ISO-8601 duration from initiation or previous dose
          type: string
          format: duration
          default: PT8H
          example: PT8H
    SeqSeries:
      description: >-
        an ordered sequence of doses at times specified as time since initiation
        of the Protocol
      required:
        - _type
        - intervals
      type: object
      properties:
        _type:
          type: string
          enum:
            - models.SeqSeries
          example: models.SeqSeries
        intervals:
          type: array
          items:
            description: ISO-8601 duration from initiation or previous dose
            type: string
            format: duration
            example:
              - PT0S
              - PT3H
              - PT24H
    SequenceFunction:
      description: function to calculate times for a series of doses
      oneOf:
        - $ref: '#/components/schemas/SeqSingleDose'
        - $ref: '#/components/schemas/SeqPerDay'
        - $ref: '#/components/schemas/SeqPerDayRange'
        - $ref: '#/components/schemas/SeqInterval'
        - $ref: '#/components/schemas/SeqSeries'
    MassUnit:
      description: unit of mass or weight
      type: string
      enum:
        - lb
        - t
        - dwt
        - gr
        - mg
        - mcg
        - oz
        - g
        - kg
      example: kg
    MassQuantity:
      required:
        - dimension
        - value
        - symbol
      properties:
        dimension:
          type: string
          enum:
            - Mass
        value:
          type: number
          minimum: 0
          default: 1
          exclusiveMinimum: true
          example: 50
        symbol:
          $ref: '#/components/schemas/MassUnit'
    VolumeUnit:
      description: unit of Volume
      type: string
      example: ml
      enum:
        - pt
        - tbsp
        - µl
        - nl
        - oz
        - dl
        - ml
        - qt
        - L
        - gal
        - c
        - tsp
    VolumeQuantity:
      required:
        - dimension
        - value
        - symbol
      properties:
        dimension:
          type: string
          description: wip
          example: Volume
          enum:
            - Volume
        value:
          type: number
          minimum: 0
          example: 3
          exclusiveMinimum: true
        symbol:
          $ref: '#/components/schemas/VolumeUnit'
    DimensionlessUnit:
      description: dimensionless unit (each)
      type: string
      enum:
        - ea
        - '%'
        - dz
      example: ea
    DimensionlessQuantity:
      required:
        - dimension
        - value
        - symbol
      properties:
        dimension:
          type: string
          example: Dimensionless
          enum:
            - Dimensionless
        value:
          type: number
          minimum: 0
          example: 3
          exclusiveMinimum: true
        symbol:
          $ref: '#/components/schemas/DimensionlessUnit'
    DrugQuantity:
      required:
        - quantity
      properties:
        quantity:
          oneOf:
            - $ref: '#/components/schemas/MassQuantity'
            - $ref: '#/components/schemas/VolumeQuantity'
            - $ref: '#/components/schemas/DimensionlessQuantity'
      example:
        quantity:
          dimension: Mass
          value: 3
          symbol: oz
    FixedDoseFunction:
      description: a fixed quantity expressed in any available unit
      required:
        - _type
        - dose
      properties:
        _type:
          type: string
          enum:
            - models.FixedDoseFunction
        dose:
          $ref: '#/components/schemas/DrugQuantity'
      example:
        dose:
          quantity:
            dimension: Volume
            value: 3
            symbol: ml
        _type: models.FixedDoseFunction
    DoseByWeightFunction:
      description: dose is specified as a quantity per unit of animal weight
      required:
        - _type
        - dose
        - perUnit
      properties:
        _type:
          type: string
          enum:
            - models.DoseByWeightFunction
        dose:
          $ref: '#/components/schemas/DrugQuantity'
        perUnit:
          $ref: '#/components/schemas/MassQuantity'
      example:
        dose:
          quantity:
            dimension: volume
            value: 3
            symbol: ml
        perUnit:
          dimension: mass
          value: 1
          symbol: kg
        _type: models.DoseByWeightFunction
    LoadingDoseByWeightFunction:
      description: >-
        dose is specified as first (loading) dose and following doses per unit
        of animal weight
      required:
        - _type
        - firstDose
        - followDose
        - perUnit
      properties:
        _type:
          type: string
          enum:
            - models.DoseByWeightFunction
        firstDose:
          $ref: '#/components/schemas/DrugQuantity'
        followDose:
          $ref: '#/components/schemas/DrugQuantity'
        perUnit:
          $ref: '#/components/schemas/MassQuantity'
      example:
        perUnit:
          dimension: mass
          value: 1
          symbol: kg
        followDose:
          quantity:
            dimension: volume
            value: 3
            symbol: ml
        _type: models.LoadingDoseByWeightFunction
        firstDose:
          quantity:
            dimension: volume
            value: 6
            symbol: ml
    DrugQuantityRange:
      required:
        - min
        - max
      properties:
        min:
          $ref: '#/components/schemas/DrugQuantity'
        max:
          $ref: '#/components/schemas/DrugQuantity'
      example:
        min:
          quantity:
            dimension: Volume
            value: 3
            symbol: ml
        max:
          quantity:
            dimension: Volume
            value: 345
            symbol: ml
    DoseRangeFunction:
      description: >-
        a range of permissible dose size. The User may select any value within
        the range (inclusive).
      required:
        - _type
        - range
      properties:
        _type:
          type: string
          enum:
            - models.DoseRangeFunction
          example: models.DoseRangeFunction
        range:
          $ref: '#/components/schemas/DrugQuantityRange'
    DoseRangeByWeightFunction:
      description: >-
        dose is specified as a range per unit of animal weight. The User may
        select any value within the range (inclusive).
      required:
        - _type
        - range
        - perUnit
      properties:
        _type:
          type: string
          enum:
            - models.DoseRangeByWeightFunction
        range:
          $ref: '#/components/schemas/DrugQuantityRange'
        perUnit:
          $ref: '#/components/schemas/MassQuantity'
      example:
        perUnit:
          dimension: Mass
          value: 1
          symbol: kg
        _type: models.DoseRangeByWeightFunction
        range:
          min:
            quantity:
              dimension: volume
              value: 3
              symbol: ml
          max:
            quantity:
              dimension: volume
              value: 2
              symbol: ml
    SizeFunction:
      description: function to calculate dose size
      oneOf:
        - $ref: '#/components/schemas/FixedDoseFunction'
        - $ref: '#/components/schemas/DoseByWeightFunction'
        - $ref: '#/components/schemas/LoadingDoseByWeightFunction'
        - $ref: '#/components/schemas/DoseRangeFunction'
        - $ref: '#/components/schemas/DoseRangeByWeightFunction'
    DoseFunctions:
      properties:
        sequenceFunction:
          $ref: '#/components/schemas/SequenceFunction'
        sizeFunction:
          $ref: '#/components/schemas/SizeFunction'
    Tag:
      description: keyword or tag for classification
      type: object
      properties:
        code:
          type: string
          maxLength: 15
          example: Example-code
    AmducaClass:
      type: string
      enum:
        - ONLABEL
        - OFFLABEL
        - UNIDENTIFIED
    Treatment:
      description: >-
        describes a series of one or more doses of a single product in terms of
        a sizeFunction (which specifies dose quantity) and a SequenceFunction
        (which specifies when the doses should be given). These functions are
        polymorphic and may depend on additional data which only is available
        when a protocol is assigned to a specific Case. For example, the
        initiation time will likely be needed to calculate the dose sequence and
        animal weight or other data may be needed to calculate dose size.
      type: object
      required:
        - product
        - route
        - sequencefunction
        - sizefunction
      properties:
        id:
          description: >-
            key value created by the database. If `id` is null or not present, a
            new database record will be created. If 'id' matches an existing
            record in the db, that record will be updated instead.
          type: string
          example: B-123
        ownerId:
          description: the `id` key of the VOR User who owns the treatment
          type: integer
          example: 0
        description:
          description: description of Treatment
          type: string
          example: 3.0 ml per kg repeat
        eligibilities:
          description: eligibility criteria for potential cases
          type: array
          items:
            $ref: '#/components/schemas/Eligibility'
        product:
          description: product name
          type: string
          example: MiracleMed
        _dose:
          description: transient string representation of `dosage`
          type: string
          example: 3.0 ml per kg repeat in 6 hours and again in 24 hours
        dosage:
          oneOf:
            - $ref: '#/components/schemas/DoseId'
            - $ref: '#/components/schemas/DoseFunctions'
        route:
          description: route of administration
          type: string
          example: wip
        wtMeatHrs:
          type: integer
          description: wip
          example: wip
        wtMilkHrs:
          type: integer
          description: wip
          example: wip
        wtNote:
          type: string
          description: wip
          example: wip
        nada:
          description: NADA or ANADA as specified by the FDA
          type: string
          example: wip
        tags:
          description: keywords for classification
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        note:
          type: string
          format: html
          example: <p>a free-form note</p>
        amduca:
          $ref: '#/components/schemas/AmducaClass'
    Diagnosis:
      description: >
        a medical diagnosis for which a Protocol may be used. Normally the
        `name` field is all that is shown in the UI, but the `id` is used
        internally to identify each Diagnosis, which should be treated as an
        immutable object. Changes to the array of Diagnoses in a Protocol are
        achieved by changing the array of `id` numbers. Changes to other fields
        will have no effect at the persistent layer.
      type: object
      properties:
        id:
          type: integer
          description: Diagnosis ID number
          example: 8
        code:
          type: string
          maxLength: 25
          description: wip should this be an enum?
          example: PAIN
        name:
          type: string
          description: free-form text description of the Diagnosis
          example: Pain/inflammation (musculoskeletal), treatment
    Promise:
      description: >-
        An act which must be executed on or after enrollment of a Case to a
        Prescription
      type: object
      required:
        - _type
        - name
        - description
        - query
        - when
      properties:
        _type:
          description: server data type to which this Promise will be mapped
          type: string
          enum:
            - models.IdPromise
            - models.AffirmationPromise
            - models.BooleanPromise
            - models.StringPromise
            - models.MassPromise
            - models.CategoryPromise
        id:
          description: Promise ID number
          type: string
          format: uuid
        name:
          description: promise name for the doctor
          type: string
        descrip:
          description: promise description for the client
          type: string
        query:
          description: question to be answered by client
          type: string
          format: html
        when:
          description: ISO-8601 duration from initiation when promise must be fulfilled
          type: string
          format: duration
          default: PT0H
        response:
          description: data supplied by the client to fulfill promise
          type: string
        responseBy:
          description: User ID of person supplying response data
          type: integer
        responseTime:
          description: timestamp for response data
          type: string
        notify:
          description: notify prescribing doctor when completed
          type: boolean
          default: false
        sigRequired:
          description: require signature of respondant
          type: boolean
          default: false
    Metadata:
      description: (for future development)
      properties:
        key:
          type: string
        value:
          type: string
    Protocol:
      description: a veterinary treatment protocol
      type: object
      required:
        - ownerId
        - name
        - status
        - withhold
        - instructions
      properties:
        id:
          description: >-
            key value created by the database. If `id` is zero or not present, a
            new database record will be created. If 'id' matches an existing
            record in the db, that record will be updated instead.
          type: integer
          format: int64
        ownerId:
          description: the `id` key of the VOR User who owns the protocol.
          type: integer
          example: 1
        name:
          description: wip
          type: string
          example: wip
        shortname:
          description: wip
          type: string
          example: wip
        created:
          description: >-
            ISO-8601-formatted datetime added by the server when a Protocol is
            first saved
          type: string
          format: date-time
          example: 2020-01-10T10:30:37Z
        edited:
          description: >-
            ISO-8601-formatted datetime updated by the server whenever a
            Protocol is saved
          type: string
          format: date-time
          example: 2020-02-10T10:30:37Z
        status:
          $ref: '#/components/schemas/ProtocolStatus'
        vetNote:
          type: string
        withhold:
          $ref: '#/components/schemas/Withhold'
        instructions:
          $ref: '#/components/schemas/Instructions'
        shareAll:
          type: boolean
          default: false
        caseDefinition:
          $ref: '#/components/schemas/CaseDefinition'
        treatments:
          description: treatments used in this protocol
          type: array
          items:
            $ref: '#/components/schemas/Treatment'
        tags:
          description: keywords for classification
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        diagnoses:
          description: diagnostic classifiers
          type: array
          items:
            $ref: '#/components/schemas/Diagnosis'
        eligibilities:
          description: eligibility criteria for potential cases
          type: array
          items:
            $ref: '#/components/schemas/Eligibility'
        promises:
          description: wip
          type: array
          items:
            $ref: '#/components/schemas/Promise'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
    Prescription:
      required:
        - size
        - unit
      properties:
        rxId:
          type: string
          description: wip
          example: gG3pBCR1GCMKm89c
        protocol:
          $ref: '#/components/schemas/Protocol'
        vorId:
          type: integer
          description: ID of VOR user who prescribed this task
          example: aZ3pBCR1GCMKm89c
        morId:
          type: integer
          description: wip
          example: tP3pBCR1GCMKm89c
        refills:
          type: integer
          description: number of repeats for this script
          default: 0
          example: 0
        expiration:
          type: string
          format: date-time
          description: ISO-8601-formatted datetime defining expiration date
          example: 2021-01-10T10:30:37Z
        created:
          type: string
          format: date-time
          description: >-
            ISO-8601-formatted datetime added by the server when prescription is
            first saved
          example: 2021-08-10T10:30:37Z
        metadata:
          type: string
          description: wip
          example: wip
        status:
          type: string
          description: wip
          example: >-
            wip - NB this may have a status of DEPRECTATED, but the property
            itself is not!
    Case:
      description: A **_Case_** records use of a **_Prescription_** on an individual animal or group
      type: object
      required:
        - id
        - rxId
        - caseData
        - promiseData
      properties:
        id:
          description: Case ID number
          type: integer
          format: int64
          default: null
          example: 123
        rxId:
          type: string
          description: UUID identifying the prescription
          example: gG3pBCR1GCMKm89c
        caseData:
          $ref: '#/components/schemas/CaseData'
        promiseData:
          description: promises attached to this case
          type: array
          items:
            $ref: '#/components/schemas/Promise'
    TaskStatus:
      type: string
      description: task status
      enum:
        - REQUIRED
        - SUGGESTED
        - DUE
        - OPTIONAL
        - OVERDUE
        - CANCELLED
        - REJECTED
        - RECALLED
        - EXECUTED
        - UNKNOWN
      example: PRESCRIBED
    PDataNone:
      type: object
      required:
        - promiseId
        - dat
      properties:
        _type:
          type: string
          description: identifies subtype of PData
          enum:
            - models.PdataNone
          example: models.PdataNone
        promiseId:
          description: ID of promise to which this data is attached
          type: integer
          default: null
          example: 123
    PDataString:
      type: object
      required:
        - promiseId
        - dat
      properties:
        _type:
          type: string
          description: identifies subtype of PData
          enum:
            - models.PdataString
          example: models.PdataString
        promiseId:
          description: ID of promise to which this data is attached
          type: integer
          default: null
          example: 123
        dat:
          type: string
          description: data to fulfill the Promise
          example: full recovery
    PDataNumber:
      type: object
      required:
        - promiseId
        - dat
      properties:
        _type:
          type: string
          description: identifies subtype of PData
          enum:
            - models.PdataNumber
          example: models.PdataNumber
        promiseId:
          description: ID of promise to which this data is attached
          type: integer
          default: null
          example: 123
        dat:
          type: number
          description:  data to fulfill the Promise
          example: 42
    PDataBoolean:
      type: object
      required:
        - promiseId
        - dat
      properties:
        _type:
          type: string
          description: identifies subtype of PData
          enum:
            - models.PDataBoolean
          example: models.PDataBoolean
        promiseId:
          description: ID of promise to which this data is attached
          type: integer
          default: null
          example: 123
        dat:
          type: boolean
          description:  data to fulfill the Promise
          example: true
    PDataMass:
      type: object
      required:
        - promiseId
        - dat
      properties:
        _type:
          type: string
          description: identifies subtype of PData
          enum:
            - models.PdataMass
          example: models.PdataMass
        promiseId:
          description: id number of Promise
          type: integer
          default: null
          example: 123
        dat:
          $ref: '#/components/schemas/MassQuantity'
    PData:
      description: a task
      oneOf:
        - $ref: '#/components/schemas/PDataNone'
        - $ref: '#/components/schemas/PDataString'
        - $ref: '#/components/schemas/PDataNumber'
        - $ref: '#/components/schemas/PDataBoolean'
        - $ref: '#/components/schemas/PDataMass'
    PTask:
      description: A Task required to fulfill a Promise
      type: object
      required:
        - id
        - caseId
        - morId
        - vorId
        - act
        - animalId
        - doAt
        - status
      properties:
        _type:
          type: string
          description: identifies subtype of AnimalTask
          enum:
            - models.PreferredDoseData
          example: models.PreferredDoseData
        id:
          description: PTask ID number
          type: integer
          format: int64
          example: 123
        caseId:
          description: ID number of Case that includes this task
          type: integer
          format: int64
          example: 123
        morId:
          description: ID of MOR user responsible for execution of this task
          type: integer
          format: int64
          example: 123
        vorId:
          description: set null or zero if User wishes to be anonymous
          type: integer
          format: int64
          example: 123
        act:
          description: explanation of the task
          type: string
          example: fix it
        animalId:
          type: string
          description: ID of animal to which the task applies
          example: this
        doAt:
          description: ISO-8601-formatted datetime when the task should be executed
          type: string
          format: date-time
          example: 2020-01-10T10:30:37Z
        executor:
          description: ID of Person who should execute the task
          type: integer
          format: int64
          example: 123
        status:
          $ref: '#/components/schemas/TaskStatus'
        data:
          $ref: '#/components/schemas/PData'
    DoseTask:
      type: object
      required:
        - id
        - caseId
        - morId
        - vorId
        - act
        - animalId
        - doAt
        - status
      properties:
        _type:
          type: string
          description: identifies subtype of AnimalTask
          enum:
            - models.PreferredDoseData
          example: models.PreferredDoseData
        id:
          description: DoseTask ID number
          type: integer
          format: int64
          example: 123
        caseId:
          description:  ID number of Case that includes this task
          type: integer
          format: int64
          example: 123
        morId:
          description:  ID of MOR user responsible for execution of this task
          type: integer
          format: int64
          example: 123
        vorId:
          description: ID of VOR user who prescribed this task
          type: integer
          format: int64
          example: 123
        act:
          description: explanation of the task
          type: string
          example: fix it
        product:
          description: product to be administered
          type: string
          example: Calcium gluconate 23%
        route:
          description: route of administration
          type: string
          example: IV    
        dose:
          $ref: '#/components/schemas/DrugQuantity'        
        animalId:
          type: string
          description: ID of animal to receive the dose
          example: this
        doAt:
          description: ISO-8601-formatted datetime, time the task should be executed
          type: string
          format: date-time
          example: 2020-01-10T10:30:37Z
        executor:
          description: set nu
          type: integer
          format: int64
          example: 123
        status:
          $ref: '#/components/schemas/TaskStatus'
    CaseData:
      description: wip tbd
      type: object
      properties:
        id:
          type: integer
          example: 0
          description: ID number for the **_Case_**
        rxId:
          type: string
          description:  UUID identifying the prescription
          example: gG3pBCR1GCMKm89c
        caseData:
          oneOf:
            - $ref: '#/components/schemas/IdData'
            - $ref: '#/components/schemas/WeightData'
            - $ref: '#/components/schemas/PreferredDoseData'
            - $ref: '#/components/schemas/PrefDoseRateData'
            - $ref: '#/components/schemas/AnimalClassData'
    IdData:
      description: identifies animal or group treated in the **_Case_**
      properties:
        _type:
          type: string
          description: identifies subtype of CaseData
          enum:
            - models.IdData
          example: models.IdData
        animalId:
          type: string
          description: text description identifying the animal or group
          example: Bossie
        initiationTime:
          type: string
          format: date-time
          example: 2020-01-10T10:30:37Z
          description:  when the **_Case_** is initiated
    PreferredDoseData:
      description: animal identity and preferred dose
      type: object
      required:
        - animalId
        - initiationTime
        - preferredDose
      properties:
        _type:
          type: string
          enum:
            - models.api.v1.PreferredDoseData
          example: models.PrefDoseRateData
        animalId:
          type: string
          description:  text description identifying the animal or group
          example: Bossie
        preferredDose:
          $ref: '#/components/schemas/DrugQuantity'
        initiationTime:
          type: string
          format: date-time
          description:  when the **_Case_** is initiated
          example: 2020-04-10T10:30:37Z
    PrefDoseRateData:
      description: weight of animal and preferred dose
      type: object
      required:
        - animalId
        - initiationTime
        - preferredDose
        - weight
      properties:
        _type:
          type: string
          description: identifies subtype of CaseData
          enum:
            - models.PrefDoseRateData
          example: models.PrefDoseRateData
        animalId:
          description:  text description identifying the animal or group
          type: integer
          default: null
          example: 123
        initiationTime:
          description:  when the **_Case_** is initiated
          type: string
          format: date-time
          example: 2020-01-10T10:30:37Z
        weight:
          $ref: '#/components/schemas/MassQuantity'
        preferredDose:
          $ref: '#/components/schemas/DrugQuantity'
    AnimalClassData:
      description: data for a class of animals
      type: object
      required:
        - animalId
        - initiationTime
        - animalClass
      properties:
        _type:
          type: string
          enum:
            - models.api.v1.AnimalClassData
          example: models.AnimalClassData
        animalId:
          description:  text description identifying the animal or group
          type: integer
          default: null
          example: 123
        initiationTime:
          description:  when the **_Case_** is initiated
          type: string
          format: date-time
          example: 2020-01-10T10:30:37Z
        animalClass:
          $ref: '#/components/schemas/AnimalClass'
    AnimalClass:
      description: a class of animals and a SizeFunction for dosing that class
      type: object
      required:
        - animalClass
        - sizeFunction
      properties:
        animalClass:
          type: string
          description: descrip
          example: Jabberwocks
        sizeFunction:
          $ref: '#/components/schemas/SizeFunction'
    WeightData:
      description: specifies animal's weight
      properties:
        _type:
          type: string
          description: identifies subtype of CaseData
          enum:
            - models.WeightData
          example: models.WeightData
        animalId:
          type: string
          description:  text description identifying the animal or group
          example: Bossie
        weight:
          $ref: '#/components/schemas/MassQuantity'
        initiationTime:
          type: string
          format: date-time
          description: when the **_Case_** is initiated
          example: 2020-01-10T10:30:37Z
    AnimalTask:
      description: a task
      oneOf:
        - $ref: '#/components/schemas/PTask'
        - $ref: '#/components/schemas/DoseTask'
  responses:
    Unauthorized:
      description: 401 – Users must log in
    BadRequest:
      description: The server could not understand the request due to invalid syntax.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The server can not find the requested resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
tags:
  - name: User
    description: Endpoints and models related to user management.
  - name: Protocol
    description: Endpoints and models related to protocol management.
  - name: Prescription
    description: Endpoints and models related to prescription management.
  - name: Case
    description: Endpoints and models related to case management.
  - name: Promise
    description: Endpoints and models related to promise management.
